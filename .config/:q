stow(8)              User Contributed Perl Documentation             stow(8)

[1mNAME[0m
       stow - manage farms of symbolic links

[1mSYNOPSIS[0m
       stow [ options ] package ...

[1mDESCRIPTION[0m
       This manual page describes GNU Stow 2.4.0.  This is not the
       definitive documentation for Stow; for that, see the accompanying
       info manual, e.g. by typing "info stow".

       Stow is a symlink farm manager which takes distinct sets of software
       and/or data located in separate directories on the filesystem, and
       makes them all appear to be installed in a single directory tree.

       Originally Stow was born to address the need to administer, upgrade,
       install, and remove files in independent software packages without
       confusing them with other files sharing the same file system space.
       For instance, many years ago it used to be common to compile programs
       such as Perl and Emacs from source.  By using Stow, [4m/usr/local/bin[0m
       could contain symlinks to files within [4m/usr/local/stow/emacs/bin[24m,
       [4m/usr/local/stow/perl/bin[24m etc., and likewise recursively for any other
       subdirectories such as [4m.../share[24m, [4m.../man[24m, and so on.

       While this is useful for keeping track of system-wide and per-user
       installations of software built from source, in more recent times
       software packages are often managed by more sophisticated package
       management software such as rpm, dpkg, and Nix / GNU Guix, or
       language-native package managers such as Ruby's gem, Python's pip,
       Javascript's npm, and so on.

       However Stow is still used not only for software package management,
       but also for other purposes, such as facilitating a more controlled
       approach to management of configuration files in the user's home
       directory, especially when coupled with version control systems.

       Stow was inspired by Carnegie Mellon's Depot program, but is
       substantially simpler and safer. Whereas Depot required database
       files to keep things in sync, Stow stores no extra state between
       runs, so there's no danger (as there was in Depot) of mangling
       directories when file hierarchies don't match the database. Also
       unlike Depot, Stow will never delete any files, directories, or links
       that appear in a Stow directory (e.g., [4m/usr/local/stow/emacs[24m), so
       it's always possible to rebuild the target tree (e.g., [4m/usr/local[24m).

       Stow is implemented as a combination of a Perl script providing a CLI
       interface, and a backend Perl module which does most of the work.

[1mTERMINOLOGY[0m
       A "package" is a related collection of files and directories that you
       wish to administer as a unit -- e.g., Perl or Emacs -- and that needs
       to be installed in a particular directory structure -- e.g., with
       [4mbin[24m, [4mlib[24m, and [4mman[24m subdirectories.

       A "target directory" is the root of a tree in which one or more
       packages wish to [1mappear [22mto be installed. A common, but by no means
       the only such location is [4m/usr/local[24m.  The examples in this manual
       page will use [4m/usr/local[24m as the target directory.

       A "stow directory" is the root of a tree containing separate packages
       in private subtrees. When Stow runs, it uses the current directory as
       the default stow directory. The examples in this manual page will use
       [4m/usr/local/stow[24m as the stow directory, so that individual packages
       will be, for example, [4m/usr/local/stow/perl[24m and [4m/usr/local/stow/emacs[24m.

       An "installation image" is the layout of files and directories
       required by a package, relative to the target directory. Thus, the
       installation image for Perl includes: a [4mbin[24m directory containing [4mperl[0m
       and [4ma2p[24m (among others); an [4minfo[24m directory containing Texinfo
       documentation; a [4mlib/perl[24m directory containing Perl libraries; and a
       [4mman/man1[24m directory containing man pages.

       A "package directory" is the root of a tree containing the
       installation image for a particular package. Each package directory
       must reside in a stow directory -- e.g., the package directory
       [4m/usr/local/stow/perl[24m must reside in the stow directory
       [4m/usr/local/stow[24m.  The "name" of a package is the name of its
       directory within the stow directory -- e.g., [4mperl[24m.

       Thus, the Perl executable might reside in
       [4m/usr/local/stow/perl/bin/perl[24m, where [4m/usr/local[24m is the target
       directory, [4m/usr/local/stow[24m is the stow directory,
       [4m/usr/local/stow/perl[24m is the package directory, and [4mbin/perl[24m within is
       part of the installation image.

       A "symlink" is a symbolic link. A symlink can be "relative" or
       "absolute". An absolute symlink names a full path; that is, one
       starting from [4m/[24m.  A relative symlink names a relative path; that is,
       one not starting from [4m/[24m.  The target of a relative symlink is
       computed starting from the symlink's own directory.  Stow only
       creates relative symlinks.

[1mOPTIONS[0m
       The stow directory is assumed to be the value of the "STOW_DIR"
       environment variable or if unset the current directory, and the
       target directory is assumed to be the parent of the current directory
       (so it is typical to execute [4mstow[24m from the directory
       [4m/usr/local/stow[24m).  Each [4mpackage[24m given on the command line is the name
       of a package in the stow directory (e.g., [4mperl[24m).  By default, they
       are installed into the target directory (but they can be deleted
       instead using "-D").

       -n
       --no
       --simulate
           Do not perform any operations that modify the filesystem; merely
           show what would happen.

       -d DIR
       --dir=DIR
           Set the stow directory to "DIR" instead of the current directory.
           This also has the effect of making the default target directory
           be the parent of "DIR".

       -t DIR
       --target=DIR
           Set the target directory to "DIR" instead of the parent of the
           stow directory.

       -v
       --verbose[=N]
           Send verbose output to standard error describing what Stow is
           doing. Verbosity levels are from 0 to 5; 0 is the default.  Using
           "-v" or "--verbose" increases the verbosity by one; using
           `--verbose=N' sets it to N.

       -S
       --stow
           Stow the packages that follow this option into the target
           directory.  This is the default action and so can be omitted if
           you are only stowing packages rather than performing a mixture of
           stow/delete/restow actions.

       -D
       --delete
           Unstow the packages that follow this option from the target
           directory rather than installing them.

       -R
       --restow
           Restow packages (first unstow, then stow again). This is useful
           for pruning obsolete symlinks from the target tree after updating
           the software in a package.

       --adopt
           [1mWarning!  [22mThis behaviour is specifically intended to alter the
           contents of your stow directory.  If you do not want that, this
           option is not for you.

           When stowing, if a target is encountered which already exists but
           is a plain file (and hence not owned by any existing stow
           package), then normally Stow will register this as a conflict and
           refuse to proceed.  This option changes that behaviour so that
           the file is moved to the same relative place within the package's
           installation image within the stow directory, and then stowing
           proceeds as before.  So effectively, the file becomes adopted by
           the stow package, without its contents changing.

       --no-folding
           Disable folding of newly stowed directories when stowing, and
           refolding of newly foldable directories when unstowing.

       --ignore=REGEX
           Ignore files ending in this Perl regex.

       --defer=REGEX
           Don't stow files beginning with this Perl regex if the file is
           already stowed to another package.

       --override=REGEX
           Force stowing files beginning with this Perl regex if the file is
           already stowed to another package.

       --dotfiles
           Enable special handling for "dotfiles" (files or folders whose
           name begins with a period) in the package directory. If this
           option is enabled, Stow will add a preprocessing step for each
           file or folder whose name begins with "dot-", and replace the
           "dot-" prefix in the name by a period (.). This is useful when
           Stow is used to manage collections of dotfiles, to avoid having a
           package directory full of hidden files.

           For example, suppose we have a package containing two files,
           [4mstow/dot-bashrc[24m and [4mstow/dot-emacs.d/init.el[24m. With this option,
           Stow will create symlinks from [4m.bashrc[24m to [4mstow/dot-bashrc[24m and
           from [4m.emacs.d/init.el[24m to [4mstow/dot-emacs.d/init.el[24m. Any other
           files, whose name does not begin with "dot-", will be processed
           as usual.

       -V
       --version
           Show Stow version number, and exit.

       -h
       --help
           Show Stow command syntax, and exit.

[1mINSTALLING PACKAGES[0m
       The default action of Stow is to install a package. This means
       creating symlinks in the target tree that point into the package
       tree.  Stow attempts to do this with as few symlinks as possible; in
       other words, if Stow can create a single symlink that points to an
       entire subtree within the package tree, it will choose to do that
       rather than create a directory in the target tree and populate it
       with symlinks.

       For example, suppose that no packages have yet been installed in
       [4m/usr/local[24m; it's completely empty (except for the [4mstow[24m subdirectory,
       of course). Now suppose the Perl package is installed.  Recall that
       it includes the following directories in its installation image: [4mbin[24m;
       [4minfo[24m; [4mlib/perl[24m; [4mman/man1[24m.  Rather than creating the directory
       [4m/usr/local/bin[24m and populating it with symlinks to
       [4m../stow/perl/bin/perl[24m and [4m../stow/perl/bin/a2p[24m (and so on), Stow will
       create a single symlink, [4m/usr/local/bin[24m, which points to
       [4mstow/perl/bin[24m.  In this way, it still works to refer to
       [4m/usr/local/bin/perl[24m and [4m/usr/local/bin/a2p[24m, and fewer symlinks have
       been created. This is called "tree folding", since an entire subtree
       is "folded" into a single symlink.

       To complete this example, Stow will also create the symlink
       [4m/usr/local/info[24m pointing to [4mstow/perl/info[24m; the symlink
       [4m/usr/local/lib[24m pointing to [4mstow/perl/lib[24m; and the symlink
       [4m/usr/local/man[24m pointing to [4mstow/perl/man[24m.

       Now suppose that instead of installing the Perl package into an empty
       target tree, the target tree is not empty to begin with. Instead, it
       contains several files and directories installed under a different
       system-administration philosophy. In particular, [4m/usr/local/bin[0m
       already exists and is a directory, as are [4m/usr/local/lib[24m and
       [4m/usr/local/man/man1[24m.  In this case, Stow will descend into
       [4m/usr/local/bin[24m and create symlinks to [4m../stow/perl/bin/perl[24m and
       [4m../stow/perl/bin/a2p[24m (etc.), and it will descend into [4m/usr/local/lib[0m
       and create the tree-folding symlink [4mperl[24m pointing to
       [4m../stow/perl/lib/perl[24m, and so on. As a rule, Stow only descends as
       far as necessary into the target tree when it can create a tree-
       folding symlink.

       The time often comes when a tree-folding symlink has to be undone
       because another package uses one or more of the folded subdirectories
       in its installation image. This operation is called "splitting open"
       a folded tree. It involves removing the original symlink from the
       target tree, creating a true directory in its place, and then
       populating the new directory with symlinks to the newly-installed
       package [1mand [22mto the old package that used the old symlink. For
       example, suppose that after installing Perl into an empty [4m/usr/local[24m,
       we wish to install Emacs.  Emacs's installation image includes a [4mbin[0m
       directory containing the [4memacs[24m and [4metags[24m executables, among others.
       Stow must make these files appear to be installed in [4m/usr/local/bin[24m,
       but presently [4m/usr/local/bin[24m is a symlink to [4mstow/perl/bin[24m.  Stow
       therefore takes the following steps: the symlink [4m/usr/local/bin[24m is
       deleted; the directory [4m/usr/local/bin[24m is created; links are made from
       [4m/usr/local/bin[24m to [4m../stow/emacs/bin/emacs[24m and
       [4m../stow/emacs/bin/etags[24m; and links are made from [4m/usr/local/bin[24m to
       [4m../stow/perl/bin/perl[24m and [4m../stow/perl/bin/a2p[24m.

       When splitting open a folded tree, Stow makes sure that the symlink
       it is about to remove points inside a valid package in the current
       stow directory.

   [1mStow will never delete anything that it doesn't own.[0m
       Stow "owns" everything living in the target tree that points into a
       package in the stow directory. Anything Stow owns, it can recompute
       if lost. Note that by this definition, Stow doesn't "own" anything [1min[0m
       the stow directory or in any of the packages.

       If Stow needs to create a directory or a symlink in the target tree
       and it cannot because that name is already in use and is not owned by
       Stow, then a conflict has arisen. See the "Conflicts" section in the
       info manual.

[1mDELETING PACKAGES[0m
       When the "-D" option is given, the action of Stow is to delete a
       package from the target tree. Note that Stow will not delete anything
       it doesn't "own". Deleting a package does [1mnot [22mmean removing it from
       the stow directory or discarding the package tree.

       To delete a package, Stow recursively scans the target tree, skipping
       over the stow directory (since that is usually a subdirectory of the
       target tree) and any other stow directories it encounters (see
       "Multiple stow directories" in the info manual). Any symlink it finds
       that points into the package being deleted is removed. Any directory
       that contained only symlinks to the package being deleted is removed.
       Any directory that, after removing symlinks and empty subdirectories,
       contains only symlinks to a single other package, is considered to be
       a previously "folded" tree that was "split open."  Stow will re-fold
       the tree by removing the symlinks to the surviving package, removing
       the directory, then linking the directory back to the surviving
       package.

[1mRESOURCE FILES[0m
       [4mStow[24m searches for default command line options at [4m.stowrc[24m (current
       directory) and [4m~/.stowrc[24m (home directory) in that order. If both
       locations are present, the files are effectively appended together.

       The effect of options in the resource file is similar to simply
       prepending the options to the command line. For options that provide
       a single value, such as [4m--target[24m or [4m--dir[24m, the command line option
       will overwrite any options in the resource file. For options that can
       be given more than once, [4m--ignore[24m for example, command line options
       and resource options are appended together.

       Environment variables and the tilde character ([4m~[24m) will be expanded
       for options that take a file path.

       The options [4m-D[24m, [4m-R[24m, [4m-S[24m, and any packages listed in the resource file
       are ignored.

       See the info manual for more information on how stow handles resource
       file.

[1mSEE ALSO[0m
       The full documentation for [4mstow[24m is maintained as a Texinfo manual.
       If the [4minfo[24m and [4mstow[24m programs are properly installed at your site,
       the command

           info stow

       should give you access to the complete manual.

[1mBUGS[0m
       Please report bugs in Stow using the Debian bug tracking system.

       Currently known bugs include:

       •   The empty-directory problem.

           If package [4mfoo[24m includes an empty directory -- say, [4mfoo/bar[24m --
           then if no other package has a [4mbar[24m subdirectory, everything's
           fine.  If another stowed package [4mquux[24m, has a [4mbar[24m subdirectory,
           then when stowing, [4mtargetdir/bar[24m will be "split open" and the
           contents of [4mquux/bar[24m will be individually stowed.  So far, so
           good. But when unstowing [4mquux[24m, [4mtargetdir/bar[24m will be removed,
           even though [4mfoo/bar[24m needs it to remain.  A workaround for this
           problem is to create a file in [4mfoo/bar[24m as a placeholder. If you
           name that file [4m.placeholder[24m, it will be easy to find and remove
           such files when this bug is fixed.

       •   When using multiple stow directories (see "Multiple stow
           directories" in the info manual), Stow fails to "split open"
           tree-folding symlinks (see "Installing packages" in the info
           manual) that point into a stow directory which is not the one in
           use by the current Stow command. Before failing, it should search
           the target of the link to see whether any element of the path
           contains a [4m.stow[24m file. If it finds one, it can "learn" about the
           cooperating stow directory to short-circuit the [4m.stow[24m search the
           next time it encounters a tree-folding symlink.

[1mAUTHOR[0m
       This man page was originally constructed by Charles Briscoe-Smith
       from parts of Stow's info manual, and then converted to POD format by
       Adam Spiers.  The info manual contains the following notice, which,
       as it says, applies to this manual page, too.  The text of the
       section entitled "GNU General Public License" can be found in the
       file [4m/usr/share/common-licenses/GPL[24m on any Debian GNU/Linux system.
       If you don't have access to a Debian system, or the GPL is not there,
       write to the Free Software Foundation, Inc., 59 Temple Place, Suite
       330, Boston, MA, 02111-1307, USA.

[1mCOPYRIGHT[0m
       Copyright (C) 1993, 1994, 1995, 1996 by Bob Glickstein
       <bobg+stow@zanshin.com>; 2000, 2001 by Guillaume Morin; 2007 by
       Kahlil Hodgson; 2011 by Adam Spiers; and others.

       Permission is granted to make and distribute verbatim copies of this
       manual provided the copyright notice and this permission notice are
       preserved on all copies.

       Permission is granted to copy and distribute modified versions of
       this manual under the conditions for verbatim copying, provided also
       that the section entitled "GNU General Public License" is included
       with the modified manual, and provided that the entire resulting
       derived work is distributed under the terms of a permission notice
       identical to this one.

       Permission is granted to copy and distribute translations of this
       manual into another language, under the above conditions for modified
       versions, except that this permission notice may be stated in a
       translation approved by the Free Software Foundation.

perl v5.38.2                     2024-04-07                          stow(8)
